--done--Todo list for first expectation --
A.first flow => if the line number does not given By user

Inputs -- 
✅1.node tail.js a.txt
✅2.node tail.js badFile.txt

--done--make following folders and file-
tail.js
source folder -> src
tailLib.js
test folder -> test
testTail.js

--done--parseArgument function

--done--loadFile function

--done--selectLastNLines function 

--done--formatContent function 

--done--performTail function

--done-- input validation

--done--implement main

--done--remove the try catch method

************************************************************************************************************


=>Todo List of second expectation --
B.Second flow => if the number of lines specified by user

Inputs--
✅1.node tail.js -n 4 a.txt
✅2.node tail.js -n 4 badFile.txt
✅3.node tail.js -n a a.txt
✅4.node tail.js -n a.txt
✅5.node tail.js -x a.txt
✅6.node tail.js -n +4 a.txt
✅7.node tail.js -n -4 a.txt
8.node tail.js -n1 a.txt
9.node tail.js -1 a.txt
10.node tail.js +1 a.txt

--done--write appTests

--done--Modify inputValidation

--done--Modify parseArgument

--done--convertSelect10Lines --> selectLast1NLines

--done--refactor the performTail function 

--done--remove the readFileSync and existsFile

--done--use readFile

************************************************************************************************************

=>Todo List of third expectation --
B.Third flow =>if content is given by the command line

Inputs--
✅1.node tail.js 
✅3.cat a.txt | node tail.js 
2.node tail.js -n 1
4.cat a.txt | node tail.js -n 1
5.node tail.js -n +1
6.cat a.txt | node tail.js -n +1

--done--find out how to write appTests

--done--find out the way to test the stdin

--done--implement readStdInput
       (Note- reading standard input)
       
--done--avoid the use of magic numbers

=>avoid more than four parameters in the function

=>refactor readStdin and loadFile functions

=>Modify performTail function

=>Modify parseOption function
